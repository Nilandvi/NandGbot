# -*- coding: utf-8 -*-

import telebot
from telebot import types
import random
from data.config import TOKEN
from data.models import User, Note, Session, Economic, Inco, Calc
import pywhatkit as kit
import os
import wikipedia
import soundfile as sf
import speech_recognition as sr
import requests
import datetime
wikipedia.set_lang("ru")


bot = telebot.TeleBot(TOKEN)
toggle = 1
logfile = str(datetime.date.today()) + '.log'
value = '0'
old_value = '0'

keyboardd = telebot.types.InlineKeyboardMarkup()
keyboardd.row(telebot.types.InlineKeyboardButton(' ', callback_data='no'),
             telebot.types.InlineKeyboardButton('C', callback_data='C'),
             telebot.types.InlineKeyboardButton('<=', callback_data='<='),
             telebot.types.InlineKeyboardButton('/', callback_data='/'))
keyboardd.row(telebot.types.InlineKeyboardButton('7', callback_data='7'),
             telebot.types.InlineKeyboardButton('8', callback_data='8'),
             telebot.types.InlineKeyboardButton('9', callback_data='9'),
             telebot.types.InlineKeyboardButton('*', callback_data='*'))
keyboardd.row(telebot.types.InlineKeyboardButton('4', callback_data='4'),
             telebot.types.InlineKeyboardButton('5', callback_data='5'),
             telebot.types.InlineKeyboardButton('6', callback_data='6'),
             telebot.types.InlineKeyboardButton('-', callback_data='-'))
keyboardd.row(telebot.types.InlineKeyboardButton('1', callback_data='1'),
             telebot.types.InlineKeyboardButton('2', callback_data='2'),
             telebot.types.InlineKeyboardButton('3', callback_data='3'),
             telebot.types.InlineKeyboardButton('+', callback_data='+'))
keyboardd.row(telebot.types.InlineKeyboardButton(' ', callback_data='no'),
             telebot.types.InlineKeyboardButton('0', callback_data='0'),
             telebot.types.InlineKeyboardButton(',', callback_data=','),
             telebot.types.InlineKeyboardButton('=', callback_data='='))


def audio_to_text(dest_name: str):
    r = sr.Recognizer()
    message = sr.AudioFile(dest_name)
    with message as source:
        audio = r.record(source)
    result = r.recognize_google(audio, language="ru_RU")
    return result


@bot.message_handler(content_types=['voice'])
def get_audio_messages(message):
    try:
        print("Started recognition...")
        file_info = bot.get_file(message.voice.file_id)
        doc = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
        with open('voice.ogg', 'wb') as f:
            f.write(doc.content)
        data, samplerate = sf.read('voice.ogg')
        sf.write('new_file.wav', data, samplerate)
        result = audio_to_text('new_file.wav')
        bot.reply_to(message, result)
    except sr.UnknownValueError as e:
        bot.send_message(message.from_user.id,  "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –æ–Ω–æ –ø–æ—É—Å—Ç–æ–µ...")


@bot.message_handler(commands=['start'])
def start_handler(message):
    with Session() as session:
        user = session.query(User).filter_by(chat_id=message.chat.id).first()
        if user is None:
            user = User(chat_id=message.chat.id, username=message.chat.username)
            session.add(user)
            session.commit()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('üóì–ó–∞–º–µ—Ç–∫–∏')
    button2 = types.KeyboardButton('üìä–ö–æ—à–µ–ª–µ–∫')
    button3 = types.KeyboardButton('üë®‚Äçüíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏')
    webAppTest = types.WebAppInfo("https://nilandvi.github.io/NandGbotWEB/") #—Å–æ–∑–¥–∞–µ–º webappinfo - —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è url
    one_butt = types.KeyboardButton(text="Webüåê", web_app=webAppTest) #—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
    button4 = types.KeyboardButton('‚ÑπÔ∏è–ü–æ–º–æ—â—å')
    keyboard.add(button1, button2, button3, one_butt, button4)
    bot.reply_to(message, f"üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å‚úÖ\n–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –Ω–∞ –ø–∏—Ç–æ–Ω–µ. –í–∏–¥ —Å–±–æ–∫—É.\n–•–æ–ª—Å—Ç. –ú–∞—Å–ª–æ. üñº",  reply_markup=keyboard)



@bot.message_handler(commands=['new_note'])
def new_note_handler(message):
    session = Session()
    user = session.query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.reply_to(message, "üìù–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    bot.register_next_step_handler(message, create_new_note, user.id)


def create_new_note(message, user_id):
    session = Session()
    if isinstance(message, telebot.types.Message):
        note = Note(user_id=str(user_id), note_text=message.text)
        session.add(note)
        session.commit()
        bot.send_message(chat_id=message.chat.id, text='‚úÖ–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    else:
        print(f'Invalid message type: {type(message)}')

@bot.message_handler(commands=['show_notes'])
def show_notes_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = Session().query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notes = Session().query(Note).filter_by(user_id=user.id).all()
    if not notes:
        bot.reply_to(message, "üìõ–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        bot.reply_to(message, "üóì–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:")
        for note in notes:
            bot.send_message(message.chat.id, f"üìù {note.note_text}")

@bot.message_handler(commands=['delete_note'])
def delete_note_handler(message):
    session = Session()
    user = session.query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notes = session.query(Note).filter_by(user_id=user.id).all()
    if not notes:
        bot.reply_to(message, "üìõ–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –∑–∞–º–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    note_text = "\n".join([f"{i + 1}. {note.note_text}" for i, note in enumerate(notes)])
    bot.reply_to(message, f"üî¢–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:\n{note_text}")
    bot.register_next_step_handler(message, remove_note, user.id)


def remove_note(message, user_id):
    session = Session()
    if not message.text.isdigit():
        bot.reply_to(message, "üìõ–ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, remove_note, user_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notes = session.query(Note).filter_by(user_id=user_id).all()
    if not notes:
        bot.reply_to(message, "üìõ–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    note_number = int(message.text)
    if note_number < 1 or note_number > len(notes):
        bot.reply_to(message, "üìõ–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, remove_note, user_id)
        return

    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
    note_to_delete = notes[note_number - 1]
    session.delete(note_to_delete)
    session.commit()
    bot.reply_to(message, "‚úÖ–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")


@bot.message_handler(commands=['expenses'])
def expens(message):
    session = Session()
    user = session.query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return
    bot.reply_to(message, '‚ùáÔ∏è–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º:')
    bot.register_next_step_handler(message, expen, user.id)


def expen(message, user_id):
    session = Session()
    if not message.text.isdigit():
        bot.reply_to(message, "üìõ—Ä–∞—Å—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, expen, user_id)
        return
    exc = int(message.text)
    if exc < 0:
        bot.reply_to(message, "üìõ–†–∞—Å—Ö–æ–¥—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
        bot.register_next_step_handler(message, expen, user_id)
        return
    e = Economic(user_id=str(user_id), expenss=message.text)
    session.add(e)
    session.commit()
    bot.reply_to(message, '‚úÖ–ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')


@bot.message_handler(commands=['incomes'])
def incoms(message):
    session = Session()
    user = session.query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return
    bot.reply_to(message, '‚ùáÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥—ã —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º:')
    bot.register_next_step_handler(message, incom, user.id)


def incom(message, user_id):
    session = Session()
    if not message.text.isdigit():
        bot.reply_to(message, "üìõ–¥–æ—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, incom, user_id)
        return
    exc = int(message.text)
    if exc < 0:
        bot.reply_to(message, "üìõ–î–æ—Ö–æ–¥—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
        bot.register_next_step_handler(message, incom, user_id)
        return
    e = Inco(user_id=str(user_id), incom=message.text)
    session.add(e)
    session.commit()
    bot.reply_to(message, '‚úÖ–ó–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–∞—Ö —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')


@bot.message_handler(commands=['show_expenses'])
def show_exp_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = Session().query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notes = Session().query(Economic).filter_by(user_id=user.id).all()
    if not notes:
        bot.reply_to(message, "üìõ–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.")
    else:
        bot.reply_to(message, "‚úÖ–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:")
        for note in notes:
            bot.send_message(message.chat.id, f"‚ûñ {note.expenss} —Ä—É–±–ª–µ–π")


@bot.message_handler(commands=['show_incomes'])
def show_inc_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = Session().query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notes = Session().query(Inco).filter_by(user_id=user.id).all()
    if not notes:
        bot.reply_to(message, "üìõ–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤.")
    else:
        bot.reply_to(message, "‚úÖ–í–∞—à–∏ –¥–æ—Ö–æ–¥—ã:")
        for note in notes:
            bot.send_message(message.chat.id, f"‚ûï {note.incom} —Ä—É–±–ª–µ–π")

if not os.path.exists('asciiart'):
    os.makedirs('asciiart')

@bot.message_handler(commands=["static"])
def econom_static(message):
    user = Session().query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return

    notes = Session().query(Inco).filter_by(user_id=user.id).all()
    notesexp = Session().query(Economic).filter_by(user_id=user.id).all()
    if not notes and not notesexp:
        bot.reply_to(message, "üìõ–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
    else:
        summ = 0
        ub = 0
        for note in notes:
            summ += int(note.incom)
        for exp in notesexp:
            ub += int(exp.expenss)
        total = summ - ub
        if total < 0: 
            bot.send_message(message.chat.id, "–ó–Ω–∞–µ—Ç–µ, –µ—Å–ª–∏ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã, —É –Ω–∞–ª–æ–≥–æ–≤–æ–π –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –≤–∞–º, –Ω–æ —è –Ω–µ –≤ –ø—Ä–∞–≤–µ –í–∞–º –º–µ—à–∞—Ç—å:")
        bot.reply_to(message, f"üëõ–í–∞—à –∫–æ—à–µ–ª–µ–∫:\nüí†–û–±—â–∞—è —Å—É–º–º–∞: {total}\n‚ûñ–ó–∞—Ç—Ä–∞—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {ub}\n‚ûï–ü—Ä–∏–±—ã–ª—å –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {summ}\n")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    global toggle
    if toggle == 1:
        photo = message.photo[-1]
        file_info = bot.get_file(photo.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open('asciiart/image.jpg', 'wb') as new_file:
            new_file.write(downloaded_file)
        ascii_art = kit.image_to_ascii_art('asciiart/image.jpg', "–¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞")
        with open('asciiart/–¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞.txt', 'w') as file:
            file.write(ascii_art)
        with open('asciiart/–¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞.txt', 'rb') as file:
            bot.send_document(message.chat.id, file)
            toggle = 0
    elif toggle == 0:
        bot.send_message(message.chat.id, f"–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ç–≤–æ–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π")


@bot.message_handler(commands=['calculator'])
def calc(message):
    global value
    user = Session().query(User).filter_by(chat_id=message.chat.id).first()
    if not user:
        bot.reply_to(message, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return
    bot.send_message(message.chat.id, '0', reply_markup=keyboardd)
    if value == '0':
        bot.send_message(message.from_user.id, '0', reply_markup=keyboardd)
    else:
        bot.send_message(message.from_user.id, value, reply_markup=keyboardd)
@bot.callback_query_handler(func=lambda call: True)
def calback(query):
    global value, old_value
    user = Session().query(User).filter_by(chat_id=query.message.chat.id).first()
    if not user:
        bot.send_message(query.message.from_user.id, "üîê–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
        return

    data = query.data
    if data == 'no':
        pass
    elif data == 'C':
        value = '0'
    elif data == '<=':
        if value != '0':
            value = value[:len(value)-1]
    elif data == '=':
        try:
            value = str(eval(value[1::]))
        except:
            value = '–æ—à–∏–±–∫–∞'
    else:
        value += data
    if (value != old_value and value != '0') or ('0' != old_value and value == '0'):
        if value == '0':
            bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id, text='0',
                                  reply_markup=keyboardd)
            old_value = '0'
        else:
            bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id, text=value,
                                  reply_markup=keyboardd)
            old_value = value
    if value == '–æ—à–∏–±–∫–∞':
        value = '0'
@bot.message_handler(content_types=['text'])
def bot_message(message):
    session = Session()
    user = session.query(User).filter_by(chat_id=message.chat.id).first()
    if message.chat.type == "private":
        if message.text == "üìä–ö–æ—à–µ–ª–µ–∫":
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton('/expenses')
            button2 = types.KeyboardButton('/show_expenses')
            button3 = types.KeyboardButton('/incomes')
            button4 = types.KeyboardButton('/show_incomes')
            button5 = types.KeyboardButton("/static")
            bt = types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥')
            keyboard.add(button1, button2, button3, button4, button5, bt)
            bot.reply_to(message, f"üßÆ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!\n/expenses - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\n/show_expenses - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤\n/incomes - –î–æ–±–∞–≤–∏—Ç—å –∑–∞—á–∏—Å–ª–µ–Ω–∏—è\n/show_incomes - –ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π\n/static - –õ–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n", reply_markup=keyboard)
        elif message.text == "üóì–ó–∞–º–µ—Ç–∫–∏":
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton('/new_note')
            button2 = types.KeyboardButton('/show_notes')
            button3 = types.KeyboardButton('/delete_note')
            bt = types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥')
            keyboard.add(button1, button2, button3, bt)
            bot.reply_to(message, f"üìö–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–º–µ—Ç–æ–∫!\n/new_note - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É\n/show_notes - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏\n/delete_note - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n", reply_markup=keyboard)
        elif message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button1 = types.KeyboardButton('üóì–ó–∞–º–µ—Ç–∫–∏')
                button2 = types.KeyboardButton('üìä–ö–æ—à–µ–ª–µ–∫')
                button3 = types.KeyboardButton('üë®‚Äçüíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏')
                button4 = types.KeyboardButton('‚ÑπÔ∏è–ü–æ–º–æ—â—å')
                keyboard.add(button1, button2, button3, button4)
                bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {user.username}\n‚úÖ–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",  reply_markup=keyboard)
        elif message.text == "üë®‚Äçüíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏":
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bt = types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥')
            keyboard.add(bt)
            bot.reply_to(message, f"üë®‚Äçüíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏üë®‚Äçüíª\n@Nilandvi\n@hochypitsu",  reply_markup=keyboard)
        elif message.text == "‚ÑπÔ∏è–ü–æ–º–æ—â—å":
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bt = types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥')
            keyboard.add(bt)
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ N&G –±–æ—Ç üëã\n–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ‚úÖ\n–ü–æ–º–∏–º–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –±–æ—Ç–µ –µ—Å—Ç—å ascii —Ö—É–¥–æ–∂–Ω–∏–∫ –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∏–∫–∏–ø–µ–¥–∏—è. \n–ö–æ–º–∞–Ω–¥—ã —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—É–Ω–∫—Ç—ã.\nüîπ–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∏–∫–∏–ø–µ–¥–∏–µ–π, —Ç–µ–±–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±–µ —Å–ª–æ–≤–æ –º–Ω–µ, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\nüîπ–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º ascii —Ö—É–¥–æ–∂–Ω–∏–∫–∞, –ø—Ä–æ—Å—Ç–æ –∫–∏–¥–∞–π –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ —Ç–∞–º —è —Å–∞–º —É–ø—Ä–∞–≤–ª—é—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n—á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏ –µ–≥–æ,–∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n=====\n–£–¥–∞—á–Ω–æ–≥–æ —Ç–µ–±–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º! \n–í —Å–ª—É—á–∞–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –±–∞–≥–∞, –∑–∞–π–¥–∏ –≤ –º–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –æ –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –º—ã –µ–µ –ø–æ—Ñ–∏–∫—Å–∏–º!\n", reply_markup=keyboard)
        elif message.text == '–æ—Ç—Å–æ—Å–∏ –º–Ω–µ':
            bot.send_message(message.chat.id, '–î—É—Ä–∫–∞ –≤—ã–µ—Ö–∞–ª–∞....')
        else:
            word = message.text.strip().lower()
            try:
                # search for articles related to the input query
                results = wikipedia.search(word, results=1)
                if results:
                    # get the summary of the first article from the search results
                    final_message = wikipedia.summary(results[0])
                else:
                    final_message = "–û–π, —Ç—ã —Å–ª–∏—à–∫–æ–º —É–º–Ω—ã–π –¥–ª—è –≤–∏–∫–∏–ø–µ–¥–∏–∏. –Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª"
            except wikipedia.exceptions.DisambiguationError as e:
                # handle disambiguation error by printing the list of options
                final_message = f"–û–π, —è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{e.title}'. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n"
                final_message += "\n".join(e.options)
            except wikipedia.exceptions.PageError:
                final_message = "–û–π, —Ç—ã —Å–ª–∏—à–∫–æ–º —É–º–Ω—ã–π –¥–ª—è –≤–∏–∫–∏–ø–µ–¥–∏–∏. –Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª"
            bot.send_message(message.chat.id, final_message, parse_mode="HTML")


bot.polling(none_stop=True, interval=0)
